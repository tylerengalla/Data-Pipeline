-- Tyler Engalla/ te4437 
-- CAPSTONE PROJECT 

-- DECLARING AZURE TENANT_ID VARIABLE -- this is my azure directory key
SET tenant_id_dev = 'df1fb142-c0b0-480c-bd17-991b424c3cc8';

-- Create integration with Azure DEV Environment
CREATE or REPLACE STORAGE INTEGRATION te4437_RAW_STORAGE_INTEGRATION
 TYPE = EXTERNAL_STAGE -- Sets the type of integration as External
 STORAGE_PROVIDER = AZURE -- Designate Azure as the cloud storage provider
 ENABLED = TRUE -- Enables the integration
 AZURE_TENANT_ID = $tenant_id_dev -- Sets the azure_tentant_id equal to pre-set variable
 STORAGE_ALLOWED_LOCATIONS = ('azure://tylersblobstorage2.blob.core.windows.net/raw/');

 --GRANT full rights to SYSDADMIN --
GRANT OWNERSHIP ON INTEGRATION te4437_RAW_STORAGE_INTEGRATION TO SYSADMIN;

--Run this to get consent URL and Multi-tenant App Name.
DESC STORAGE INTEGRATION te4437_RAW_STORAGE_INTEGRATION;

-- make sure we're in right db
USE DATABASE te4437_DW;

-- Create ELT, Silver, and Gold layer for use 
CREATE or REPLACE SCHEMA CAPSTONE_ELT_STAGE
COMMENT = 'This schema is used to load data from ADLS gen2(Azure Datalake) to Snowflake';
CREATE or REPLACE SCHEMA CAPSTONE_SILVER_LAYER
COMMENT = 'This schema is used to create Capstone Silver Layer';
CREATE or REPLACE SCHEMA CAPSTONE_GOLD_LAYER
COMMENT = 'This schema is used to create Capstone Silver Layer';

-- Use block to make sure you’re using the right role and objects.
USE ROLE ACCOUNTADMIN;
USE DATABASE TE4437_DW;
USE WAREHOUSE TE4437_WH; -- This should be the name you gave your warehouse in step 4

-- Creates an external_stage in your ELT schema.
CREATE OR REPLACE STAGE TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE
COMMENT = 'This is CAPSTONE Raw External Stage for the ELT Account on the RRC DataLake Blob Container'
STORAGE_INTEGRATION = te4437_RAW_STORAGE_INTEGRATION
URL = 'azure://tylersblobstorage2.blob.core.windows.net/raw/';

-- USE SCHEMA CAPSTONE_ELT_STAGE;

-- View the content of of external stage we created 
LIST @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/; -- View contents of stage
LIST @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/athlete_events.csv; -- View specific file stats
LIST @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/country_definitions.csv; -- View specific file stats

-- Check event data 
SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
FROM @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/athlete_events.csv;

-- Check country data 
SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
FROM @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/country_definitions.csv;
 
--use "transient" when just loading from lake to snowflake
--Create a table to store training data file
create OR replace transient table TE4437_DW.CAPSTONE_ELT_STAGE.athlete_events_dw (
ID int primary key,
Name varchar,
Sex varchar,
Age int,
Height int,
Weight int,
Team varchar,
NOC varchar,
Games varchar(50),
Year int,
Season varchar,
City varchar,
Sport varchar,
Event varchar,
Medal varchar
);
--Create a table to store test data file
create OR replace transient table TE4437_DW.CAPSTONE_ELT_STAGE.country_definitions_dw (
NOC varchar,
Region varchar,
notes varchar
);
 
-- Creating a FILE FORMAT --> Example (CSV with headers)
CREATE OR REPLACE FILE FORMAT TE4437_DW.CAPSTONE_ELT_STAGE.ELT_CSV_COMMA_DELIMITED_HEADER
COMMENT = 'File Format for CSV comma delimited Column Header files'
COMPRESSION = 'NONE'
TYPE = CSV -- Set file tyle
FIELD_DELIMITER = ',' -- Delimits columns by comma
RECORD_DELIMITER = '\n' -- Delimits rows by line break
SKIP_HEADER = 1 -- Skip the first row and don’t treat as data
FIELD_OPTIONALLY_ENCLOSED_BY = '\042'
TRIM_SPACE = FALSE
ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
ESCAPE = '\134'
ESCAPE_UNENCLOSED_FIELD = 'NONE'
DATE_FORMAT = 'AUTO'
TIMESTAMP_FORMAT = 'AUTO'
EMPTY_FIELD_AS_NULL = TRUE
NULL_IF = ('NA');  -- Replace 'NA' with NULL (or blank);

-- 5 load event data into elt stage 
TRUNCATE TABLE TE4437_DW.CAPSTONE_ELT_STAGE.athlete_events_dw;
COPY INTO TE4437_DW.CAPSTONE_ELT_STAGE.athlete_events_dw
FROM @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/athlete_events.csv
FILE_FORMAT = TE4437_DW.CAPSTONE_ELT_STAGE.ELT_CSV_COMMA_DELIMITED_HEADER
ON_ERROR=CONTINUE;

-- check event data loaded successfully 
SELECT *
FROM TE4437_DW.CAPSTONE_ELT_STAGE.athlete_events_dw;

-- load country data 
TRUNCATE TABLE TE4437_DW.CAPSTONE_ELT_STAGE.country_definitions_dw;
COPY INTO TE4437_DW.CAPSTONE_ELT_STAGE.country_definitions_dw
FROM @TE4437_DW.CAPSTONE_ELT_STAGE.ELT_RAW_EXTERNAL_STAGE/country_definitions.csv
FILE_FORMAT = TE4437_DW.CAPSTONE_ELT_STAGE.ELT_CSV_COMMA_DELIMITED_HEADER
ON_ERROR=CONTINUE;

-- check country data loaded successfully 
SELECT *
FROM TE4437_DW.CAPSTONE_ELT_STAGE.country_definitions_dw;

-- 6
-- join tables in silver layer 
CREATE OR REPLACE TABLE TE4437_DW.CAPSTONE_SILVER_LAYER.olympic_data_dw as (
Select a.*,
    c.region,
    c.notes
from TE4437_DW.CAPSTONE_ELT_STAGE.athlete_events_dw a
join TE4437_DW.CAPSTONE_ELT_STAGE.country_definitions_dw c on a.noc = c.noc);

-- view table from silver layer
select * from TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW;

-- create another silver layer table of all the athletes - removing duplicates 
CREATE OR REPLACE TABLE TE4437_DW.CAPSTONE_SILVER_LAYER.olympic_athletes_dw as (
    with rankedrows as(
        Select ID,
            Name,
            Age, 
            Height, 
            Weight,
            row_number() over (partition by ID order by ID) as row_num
        from TE4437_DW.CAPSTONE_SILVER_LAYER.olympic_data_dw)
    select 
        ID,
        Name,
        Age, 
        Height,
        Weight
    from rankedrows 
    where row_num = 1
    order by ID
);

-- check new table that it is duplicate free 
select * from TE4437_DW.CAPSTONE_SILVER_LAYER.olympic_athletes_dw;


-- alter/ reformat one column 
-- convert weights in kg to lbs 
update TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
set weight = weight * 2.20462;

-- alter height that's in cm to be inches
update TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
set height = height * .393701;

-- Parse Games column to seperate year and season
alter table TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
add column year2 int;

alter table TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
add column season2 varchar;

update TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
set year2 = to_number(split_part(GAMES, ' ', 1));

update TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
set season2 = split_part(GAMES, ' ', 2);

-- create an aggregrated table for Gold layer 

CREATE OR REPLACE TABLE TE4437_DW.CAPSTONE_GOLD_LAYER.olympic_gold as (
Select team,
    count(case when medal = 'Gold' then 1 end) as gold_medals,
    count(case when medal = 'Silver' then 1 end) as silver_medals,
    count(case when medal = 'Bronze' then 1 end) as bronze_medals,
    -- add total medal count column
    count(case when medal in ('Gold', 'Silver', 'Bronze') then 1 end) as total_medals
from TE4437_DW.CAPSTONE_SILVER_LAYER.OLYMPIC_DATA_DW
group by team
order by total_medals desc
);

--  check gold layer table 
select * from TE4437_DW.CAPSTONE_GOLD_LAYER.olympic_gold;

-- check table from snowpark session was added to gold layer 
select * from TE4437_DW.CAPSTONE_GOLD_LAYER.SEX_MEDAL_COUNT_TABLE;
